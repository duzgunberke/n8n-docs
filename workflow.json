{
  "name": "Simple Timesheet Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 18 * * *"
            }
          ]
        }
      },
      "id": "f1e4c567-8901-2345-6789-012345678901",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [200, 300]
    },
    {
      "parameters": {},
      "id": "f1e4c567-8901-2345-6789-012345678902",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [200, 200]
    },
    {
      "parameters": {
        "operation": "get",
        "documentId": "={{$env.GOOGLE_DOCS_ID}}",
        "simple": false,
        "options": {}
      },
      "id": "f1e4c567-8901-2345-6789-012345678903",
      "name": "Read Google Docs",
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [400, 250],
      "credentials": {
        "googleApi": {
          "id": "google-oauth-credential",
          "name": "Google OAuth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Google Docs içeriğini basit parse et\nconst docContent = $input.first().json.body.content;\n\n// Text extraction\nfunction extractText(element) {\n  if (element.paragraph && element.paragraph.elements) {\n    return element.paragraph.elements\n      .map(el => el.textRun ? el.textRun.content : '')\n      .join('');\n  }\n  return '';\n}\n\n// Tüm text'i al\nlet fullText = '';\nfunction processElement(element) {\n  if (element.paragraph) {\n    fullText += extractText(element);\n  }\n  if (element.structuralElements) {\n    element.structuralElements.forEach(processElement);\n  }\n}\n\nif (docContent && Array.isArray(docContent)) {\n  docContent.forEach(processElement);\n}\n\n// Satırlara böl\nconst lines = fullText.split('\\n')\n  .map(line => line.trim())\n  .filter(line => line.length > 0);\n\n// Basit regex'ler\nconst datePattern = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\nconst namePattern = /^[A-ZÇĞıİÖŞÜ][a-zçğıöşüA-ZÇĞIİÖŞÜ]+\\s+[A-ZÇĞıİÖŞÜ][a-zçğıöşüA-ZÇĞIİÖŞÜ]+$/;\n\nlet entries = [];\nlet currentDate = '';\nlet currentName = '';\nlet currentTasks = [];\n\nfor (let line of lines) {\n  // Tarih mi?\n  if (datePattern.test(line)) {\n    // Önceki entry'yi kaydet\n    if (currentDate && currentName && currentTasks.length > 0) {\n      entries.push({\n        date: currentDate,\n        name: currentName,\n        tasks: [...currentTasks]\n      });\n    }\n    currentDate = line;\n    currentName = '';\n    currentTasks = [];\n    continue;\n  }\n  \n  // İsim mi?\n  if (namePattern.test(line)) {\n    // Önceki kişinin entry'sini kaydet\n    if (currentDate && currentName && currentTasks.length > 0) {\n      entries.push({\n        date: currentDate,\n        name: currentName,\n        tasks: [...currentTasks]\n      });\n    }\n    currentName = line;\n    currentTasks = [];\n    continue;\n  }\n  \n  // Task mi?\n  if (currentDate && currentName && line.length > 2) {\n    const cleanTask = line.replace(/^[\\-\\*\\•]\\s*/, '').trim();\n    if (cleanTask.length > 0) {\n      currentTasks.push(cleanTask);\n    }\n  }\n}\n\n// Son entry'yi ekle\nif (currentDate && currentName && currentTasks.length > 0) {\n  entries.push({\n    date: currentDate,\n    name: currentName,\n    tasks: [...currentTasks]\n  });\n}\n\nconsole.log(`Toplam ${entries.length} entry bulundu`);\n\n// Her entry için output\nreturn entries.map(entry => ({\n  json: {\n    date: entry.date,\n    name: entry.name,\n    tasks: entry.tasks,\n    tasksText: entry.tasks.join('\\n'),\n    sheetName: entry.name.replace(/[^a-zA-Z0-9çğıöşüÇĞIİÖŞÜ\\s]/g, '').replace(/\\s+/g, '_')\n  }\n}));"
      },
      "id": "f1e4c567-8901-2345-6789-012345678904",
      "name": "Simple Parse",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 250]
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "prompt": "Şu timesheet verisini düzenle ve anlamlı hale getir:\n\nTarih: {{$json.date}}\nKişi: {{$json.name}}\nYapılan İşler:\n{{$json.tasksText}}\n\nLütfen:\n- Kısa açıklamaları detaylandır\n- Teknik terimleri düzelt\n- Türkçe karakterleri düzelt\n- Her satırı ayrı satırda göster\n\nSadece düzenlenmiş task listesini döndür, başka açıklama ekleme:",
        "options": {
          "temperature": 0.3,
          "maxTokens": 1000
        }
      },
      "id": "f1e4c567-8901-2345-6789-012345678905",
      "name": "Claude Process",
      "type": "n8n-nodes-base.anthropic",
      "typeVersion": 1,
      "position": [800, 250],
      "credentials": {
        "anthropicApi": {
          "id": "claude-api-credential",
          "name": "Claude API"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": "={{$env.GOOGLE_SHEETS_ID}}",
        "sheetName": "={{$('Simple Parse').item.json.sheetName}}",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Tarih": "={{$('Simple Parse').item.json.date}}",
            "Kisi": "={{$('Simple Parse').item.json.name}}",
            "Yapilan_Isler": "={{$json.response}}"
          }
        },
        "options": {
          "cellFormat": "USER_ENTERED",
          "useAppend": true
        }
      },
      "id": "f1e4c567-8901-2345-6789-012345678906",
      "name": "Write to Sheet",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [1000, 250],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-credential",
          "name": "Google Sheets OAuth"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "status",
              "value": "success"
            },
            {
              "name": "message",
              "value": "Timesheet başarıyla işlendi"
            },
            {
              "name": "kisi",
              "value": "={{$('Simple Parse').item.json.name}}"
            },
            {
              "name": "tarih",
              "value": "={{$('Simple Parse').item.json.date}}"
            },
            {
              "name": "sheet",
              "value": "={{$('Simple Parse').item.json.sheetName}}"
            }
          ]
        }
      },
      "id": "f1e4c567-8901-2345-6789-012345678907",
      "name": "Success",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [1200, 250]
    }
  ],
  "connections": {
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "Read Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Read Google Docs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Google Docs": {
      "main": [
        [
          {
            "node": "Simple Parse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Parse": {
      "main": [
        [
          {
            "node": "Claude Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude Process": {
      "main": [
        [
          {
            "node": "Write to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Write to Sheet": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true
  },
  "staticData": {},
  "tags": [
    {
      "createdAt": "2024-12-20T15:00:00.000Z",
      "updatedAt": "2024-12-20T15:00:00.000Z",
      "id": "simple-timesheet",
      "name": "Simple Timesheet"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2024-12-20T15:00:00.000Z",
  "versionId": "1.0.0"
}